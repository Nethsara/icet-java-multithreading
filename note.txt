Q1
class Demo{
	public static void main(String args[]){
		for (int i = 0; i < 100; i++){
			System.out.println("Program A : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
		
		for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
		
	}
}

/////////////////////////////////////////////////////////////////////////////////
Q2
class MyThread extends Thread{
	public void run(){
	for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}		
	}
}
class Demo{
	public static void main(String args[]){
		for (int i = 0; i < 100; i++){
			System.out.println("Program A : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
	}
}
//////////////////////////////////////////////////////////////////
Q3
class MyThread extends Thread{
	public void run(){
	for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}		
	}
}
class Demo{
	public static void main(String args[]){
		for (int i = 0; i < 100; i++){
			System.out.println("Program A : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
		MyThread t1=new MyThread();
	}
}
//////////////////////////////////////////////////////////////
Q4
class MyThread extends Thread{
	public void run(){
	for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}		
	}
}
class Demo{
	public static void main(String args[]){
		for (int i = 0; i < 100; i++){
			System.out.println("Program A : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
		MyThread t1=new MyThread();
		t1.start();
	}
}
///////////////////////////////////////////////////////////////
Q5
class MyThread extends Thread{
	public void run(){
	for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}		
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread();
		t1.start();
		for (int i = 0; i < 100; i++){
			System.out.println("Program A : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
		
	}
}

///////////////////////////////////////////////////////////////
Q6
class MyThreadA extends Thread{
	public void run(){
	for (int i = 0; i < 100; i++){
			System.out.println("Program A : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}		
	}
}
class MyThreadB extends Thread{
	public void run(){
	for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}		
	}
}
class Demo{
	public static void main(String args[]){
		new MyThreadA().start();
		new MyThreadB().start();
	}
}

///////////////////////////////////////////////////////////////
Q7 method "run()" vs "start()"
==============================
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class MyFrame extends JFrame{
	private JButton exitButton;
	
	MyFrame(){
		setSize(300,300);
		setTitle("MyFrame");
		setDefaultCloseOperation(EXIT_ON_CLOSE); 
		setLocationRelativeTo(null);
		
		exitButton=new JButton();
		exitButton.setText("Exit");
		exitButton.setFont(new Font("",1,30));
		exitButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent evt){
				int i=0;
				while(true){
					System.out.println("i : "+i++);
				}
			}
		});
		add(exitButton);
	}	
}
class Demo{
	public static void main(String args[]){
		new MyFrame().setVisible(true);
	}
}

///////////////////////////////////////////////////////////////
Q8
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class MyFrame extends JFrame{
	private JButton exitButton;
	private JTextField text;
	MyFrame(){
		setSize(300,300);
		setTitle("MyFrame");
		setDefaultCloseOperation(DISPOSE_ON_CLOSE); 
		setLocationRelativeTo(null);
		setLayout(new FlowLayout());
		
		text=new JTextField(10);
		text.setFont(new Font("",1,30));
		add(text);
		
		exitButton=new JButton();
		exitButton.setText("Exit");
		exitButton.setFont(new Font("",1,30));
		exitButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent evt){
				String name=text.getText();
				class MyThread extends Thread{
					public void run(){
						int i=0;
						while(true){
							System.out.println(name+" : "+i++);
						}
					}
				}
				new MyThread().start();
				
			}
		});
		add(exitButton);
	}	
}
class Demo{
	public static void main(String args[]){
		new MyFrame().setVisible(true);
	}
}

///////////////////////////////////////////////////////////////
Q9
class Demo{
	public static void main(String args[]){
		Thread t1=Thread.currentThread();
		System.out.println("Name : "+t1.getName());
		System.out.println("Priority : "+t1.getPriority());
		
		t1.setName("My Main");
		System.out.println("Name : "+t1.getName());
	}
}

///////////////////////////////////////////////////////////////
Q10
class MyThread extends Thread{
	public void run(){
		//
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread(); 
		MyThread t2=new MyThread(); 
		MyThread t3=new MyThread(); 
		System.out.println("Name t1 : "+t1.getName());
		System.out.println("Name t1 : "+t2.getName());
		System.out.println("Name t1 : "+t3.getName());
	}
}

///////////////////////////////////////////////////////////////
Q11
class MyThread extends Thread{
	public void run(){
		Thread t=currentThread();
		System.out.println("Name : "+t.getName());
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread(); 
		t1.setName("MyThread");
		t1.start(); //vs t1.run();
	}
}

///////////////////////////////////////////////////////////////
Q12 Exercise
============
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One"); 
		MyThread t2=new MyThread("Two"); 
		MyThread t3=new MyThread("Three"); 
		
		t1.start();
		t2.start();
		t3.start();
	}
}

///////////////////////////////////////////////////////////////
Q13
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One"); 
		MyThread t2=new MyThread("Two"); 
		MyThread t3=new MyThread("Three"); 
		
		System.out.println("State t1 : "+t1.getState());
		System.out.println("State t2 : "+t2.getState());
		System.out.println("State t3 : "+t3.getState());
		
	}
}

///////////////////////////////////////////////////////////////
Q14 From Q13
============
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One"); 
		MyThread t2=new MyThread("Two"); 
		MyThread t3=new MyThread("Three"); 
		
		System.out.println("State t1 : "+t1.getState());
		System.out.println("State t2 : "+t2.getState());
		System.out.println("State t3 : "+t3.getState());
		
		t1.start();
		t2.start();
		t3.start();
		
		System.out.println("State t1 : "+t1.getState());
		System.out.println("State t2 : "+t2.getState());
		System.out.println("State t3 : "+t3.getState());
	}
}

///////////////////////////////////////////////////////////////
Q15 From Q13
============
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			//try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One"); 
		MyThread t2=new MyThread("Two"); 
		MyThread t3=new MyThread("Three"); 
		
		System.out.println("State t1 : "+t1.getState());
		System.out.println("State t2 : "+t2.getState());
		System.out.println("State t3 : "+t3.getState());
		
		t1.start();
		t2.start();
		t3.start();
		
		try{Thread.sleep(2000);}catch(InterruptedException ex){}
		System.out.println("State t1 : "+t1.getState());
		System.out.println("State t2 : "+t2.getState());
		System.out.println("State t3 : "+t3.getState());
	}
}

///////////////////////////////////////////////////////////////
	Thread Priority
///////////////////////////////////////////////////////////////
Q16
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			//try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One"); 
		MyThread t2=new MyThread("Two"); 
		MyThread t3=new MyThread("Three"); 
		
		t1.setPriority(6);
		t2.setPriority(7);
		t3.setPriority(8);
		
		t1.start();
		t2.start();
		t3.start();
		
	}
}

///////////////////////////////////////////////////////////////
	Thread Yielding
///////////////////////////////////////////////////////////////
Q17
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			if(i%10==0){
				Thread.yield();
			}
			//try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One"); 
		MyThread t2=new MyThread("Two"); 
		MyThread t3=new MyThread("Three"); 
		
		t1.start();
		t2.start();
		t3.start();
		
	}
}

///////////////////////////////////////////////////////////////
		Join Threads
///////////////////////////////////////////////////////////////
Q18
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One");
		t1.start();
		for(int i=0; i<100; i++){
			System.out.println("main : "+i);
			try{Thread.sleep(100);}catch(InterruptedException ex){}
			if(i==50){
				try{t1.join();}catch(InterruptedException ex){}
			}
		}		
	}
}

///////////////////////////////////////////////////////////////
Q19 From Q15
============
class MyThread extends Thread{
	MyThread(String name){
		setName(name);
	}
	public void run(){
		for(int i=0; i<100; i++){
			System.out.println(getName()+" : "+i);
			//try{Thread.sleep(100);}catch(InterruptedException ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		MyThread t1=new MyThread("One"); 
		MyThread t2=new MyThread("Two"); 
		MyThread t3=new MyThread("Three"); 
		
		System.out.println("State t1 : "+t1.getState());
		System.out.println("State t2 : "+t2.getState());
		System.out.println("State t3 : "+t3.getState());
		
		t1.start();
		t2.start();
		t3.start();
		
		try{
			t1.join();
			t2.join();
			t3.join();
		}catch(InterruptedException ex){}

		System.out.println("State t1 : "+t1.getState());
		System.out.println("State t2 : "+t2.getState());
		System.out.println("State t3 : "+t3.getState());
	}
}

///////////////////////////////////////////////////////////////
Q20 Exercise
============
class Demo{
	public static void main(String args[]){
		Thread t1=Thread.currentThread();
		System.out.println("Start main");
		try{t1.join();}catch(Exception ex){}
		System.out.println("End main");
	}
}

///////////////////////////////////////////////////////////////
Q21
class Demo{
	public static void main(String args[]){
		Thread t1=Thread.currentThread();
		System.out.println("Start main");
		try{t1.join(4000);}catch(Exception ex){}
		System.out.println("End main");
	}
}

///////////////////////////////////////////////////////////////
	Create and run a thread
///////////////////////////////////////////////////////////////
Q22 Method 1 (Using anonymous inner classes)
============================================
class Demo{
	public static void main(String args[]){
		
		Thread t1=new Thread(){
			public void run(){
				//
			}
		}; 
		t1.start();
		
		new Thread(){
			public void run(){
				for (int i = 0; i < 100; i++){
					System.out.println("Program A : "+i);
					try{Thread.sleep(100);}catch(Exception ex){}
				}
			}
		}.start();
		
		for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
		
	}
}

///////////////////////////////////////////////////////////////
Q23 Using "Runnable" target
===========================
class MyRunnable implements Runnable{
	public void run(){
		for (int i = 0; i < 100; i++){
			System.out.println("Program A : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
	}
}
class Demo{
	public static void main(String args[]){
		Thread t1=new Thread(new MyRunnable());
		t1.start();
		for (int i = 0; i < 100; i++){
			System.out.println("Program B : "+i);
			try{Thread.sleep(100);}catch(Exception ex){}
		}
		
	}
}

///////////////////////////////////////////////////////////////
Q24 From Q23
============
class Demo{
	public static void main(String args[]){
		new Thread(new Runnable(){
			public void run(){
				for (int i = 0; i < 100; i++){
					System.out.println("Program A : "+i);
					try{Thread.sleep(100);}catch(Exception ex){}
				}
			}
		}).start();
		
		new Thread(){
			public void run(){	
				for (int i = 0; i < 100; i++){
					System.out.println("Program B : "+i);
					try{Thread.sleep(100);}catch(Exception ex){}
				}
			}
		}.start();
	}
}

///////////////////////////////////////////////////////////////
Q25 Exercise 1
===============
class MyRunnable implements Runnable{
	public void run(){
		System.out.println("MyRunnable");
	}
}
class MyThread extends Thread{
	
}
class Demo{
	public static void main(String args[]){
		MyRunnable r=new MyRunnable();
		MyThread t1=new MyThread(r);
		t1.start();
	}
}

///////////////////////////////////////////////////////////////
Q26 Exercise 2
==============
class MyRunnable implements Runnable{
	public void run(){
		System.out.println("MyRunnable");
	}
}
class MyThread extends Thread{
	MyThread(Runnable target){
		
	}
}
class Demo{
	public static void main(String args[]){
		MyRunnable r=new MyRunnable();
		MyThread t1=new MyThread(r);
		t1.start();
	}
}

///////////////////////////////////////////////////////////////
Q27 Exercise 3
==============
class MyRunnable implements Runnable{
	public void run(){
		System.out.println("MyRunnable");
	}
}
class MyThread extends Thread{
	MyThread(Runnable target){
		super(target);
	}
}
class Demo{
	public static void main(String args[]){
		MyRunnable r=new MyRunnable();
		MyThread t1=new MyThread(r);
		t1.start();
	}
}

///////////////////////////////////////////////////////////////
Q28 Exercise 4
==============
class MyRunnable implements Runnable{
	public void run(){
		System.out.println("MyRunnable");
	}
}
class MyThread extends Thread{
	MyThread(Runnable target){
		super(target);
	}
	public void run(){
		System.out.println("MyThread");
	}	
}
class Demo{
	public static void main(String args[]){
		MyRunnable r=new MyRunnable();
		MyThread t1=new MyThread(r);
		t1.start();
	}
}

///////////////////////////////////////////////////////////////
Q29 Method 3 Using Lambda Expression
====================================
class Demo{
	public static void main(String args[]){
		
		Runnable r=()->{
			for (int i = 0; i < 100; i++){
				System.out.println("Program A : "+i);
				try{Thread.sleep(100);}catch(Exception ex){}
			}
		};
		
		new Thread(r).start();
		
		//=====================================================
		new Thread(){
			public void run(){	
				for (int i = 0; i < 100; i++){
					System.out.println("Program B : "+i);
					try{Thread.sleep(100);}catch(Exception ex){}
				}
			}
		}.start();
	}
}

///////////////////////////////////////////////////////////////
Q30
class Demo{
	public static void main(String args[]){
		new Thread(()->{
			for (int i = 0; i < 100; i++){
				System.out.println("Program A : "+i);
				try{Thread.sleep(100);}catch(Exception ex){}
			}
		}).start();
		
		//=====================================================
		new Thread(){
			public void run(){	
				for (int i = 0; i < 100; i++){
					System.out.println("Program B : "+i);
					try{Thread.sleep(100);}catch(Exception ex){}
				}
			}
		}.start();
	}
}

///////////////////////////////////////////////////////////////
	Synchronization
///////////////////////////////////////////////////////////////
Q31
class CustomerController{
	public void addCustomer(String id, String name){
		System.out.print("[");
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print(id);
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print("-");
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print(name);
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.println("]");
	}
}
class Demo{
	public static void main(String args[]){
		CustomerController c1=new CustomerController();
		c1.addCustomer("C001","Danapala");
		c1.addCustomer("C002","Gunapala");
	}
}

///////////////////////////////////////////////////////////////
Q32
class CustomerController{
	public void addCustomer(String id, String name){
		System.out.print("[");
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print(id);
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print("-");
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print(name);
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.println("]");
	}
}
class Demo{
	public static void main(String args[]){
		CustomerController c1=new CustomerController();
		new Thread(){
			public void run(){
				c1.addCustomer("C001","Danapala");
			}
		}.start();
		new Thread(){
			public void run(){
				c1.addCustomer("C002","Gunapala");
			}
		}.start();
	}
}

///////////////////////////////////////////////////////////////
Q33 From Q32 Using "synchronization"
====================================
class CustomerController{
	synchronized public void addCustomer(String id, String name){
		System.out.print("[");
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print(id);
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print("-");
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.print(name);
		try{Thread.sleep(500);}catch(Exception ex){}
		System.out.println("]");
	}
}
class Demo{
	public static void main(String args[]){
		CustomerController c1=new CustomerController();
		new Thread(){
			public void run(){
				c1.addCustomer("C001","Danapala");
			}
		}.start();
		new Thread(){
			public void run(){
				c1.addCustomer("C002","Gunapala");
			}
		}.start();
	}
}




